/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package se.arbetsformedlingen.kafka;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Annons extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3575008415128844175L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Annons\",\"namespace\":\"se.arbetsformedlingen.kafka\",\"fields\":[{\"name\":\"annons_id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"rubrik\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"text\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Annons> ENCODER =
      new BinaryMessageEncoder<Annons>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Annons> DECODER =
      new BinaryMessageDecoder<Annons>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Annons> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Annons> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Annons>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Annons to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Annons from a ByteBuffer. */
  public static Annons fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String annons_id;
  @Deprecated public java.lang.String rubrik;
  @Deprecated public java.lang.String text;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Annons() {}

  /**
   * All-args constructor.
   * @param annons_id The new value for annons_id
   * @param rubrik The new value for rubrik
   * @param text The new value for text
   */
  public Annons(java.lang.String annons_id, java.lang.String rubrik, java.lang.String text) {
    this.annons_id = annons_id;
    this.rubrik = rubrik;
    this.text = text;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return annons_id;
    case 1: return rubrik;
    case 2: return text;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: annons_id = (java.lang.String)value$; break;
    case 1: rubrik = (java.lang.String)value$; break;
    case 2: text = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'annons_id' field.
   * @return The value of the 'annons_id' field.
   */
  public java.lang.String getAnnonsId() {
    return annons_id;
  }

  /**
   * Sets the value of the 'annons_id' field.
   * @param value the value to set.
   */
  public void setAnnonsId(java.lang.String value) {
    this.annons_id = value;
  }

  /**
   * Gets the value of the 'rubrik' field.
   * @return The value of the 'rubrik' field.
   */
  public java.lang.String getRubrik() {
    return rubrik;
  }

  /**
   * Sets the value of the 'rubrik' field.
   * @param value the value to set.
   */
  public void setRubrik(java.lang.String value) {
    this.rubrik = value;
  }

  /**
   * Gets the value of the 'text' field.
   * @return The value of the 'text' field.
   */
  public java.lang.String getText() {
    return text;
  }

  /**
   * Sets the value of the 'text' field.
   * @param value the value to set.
   */
  public void setText(java.lang.String value) {
    this.text = value;
  }

  /**
   * Creates a new Annons RecordBuilder.
   * @return A new Annons RecordBuilder
   */
  public static se.arbetsformedlingen.kafka.Annons.Builder newBuilder() {
    return new se.arbetsformedlingen.kafka.Annons.Builder();
  }

  /**
   * Creates a new Annons RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Annons RecordBuilder
   */
  public static se.arbetsformedlingen.kafka.Annons.Builder newBuilder(se.arbetsformedlingen.kafka.Annons.Builder other) {
    return new se.arbetsformedlingen.kafka.Annons.Builder(other);
  }

  /**
   * Creates a new Annons RecordBuilder by copying an existing Annons instance.
   * @param other The existing instance to copy.
   * @return A new Annons RecordBuilder
   */
  public static se.arbetsformedlingen.kafka.Annons.Builder newBuilder(se.arbetsformedlingen.kafka.Annons other) {
    return new se.arbetsformedlingen.kafka.Annons.Builder(other);
  }

  /**
   * RecordBuilder for Annons instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Annons>
    implements org.apache.avro.data.RecordBuilder<Annons> {

    private java.lang.String annons_id;
    private java.lang.String rubrik;
    private java.lang.String text;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(se.arbetsformedlingen.kafka.Annons.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.annons_id)) {
        this.annons_id = data().deepCopy(fields()[0].schema(), other.annons_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.rubrik)) {
        this.rubrik = data().deepCopy(fields()[1].schema(), other.rubrik);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.text)) {
        this.text = data().deepCopy(fields()[2].schema(), other.text);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Annons instance
     * @param other The existing instance to copy.
     */
    private Builder(se.arbetsformedlingen.kafka.Annons other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.annons_id)) {
        this.annons_id = data().deepCopy(fields()[0].schema(), other.annons_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.rubrik)) {
        this.rubrik = data().deepCopy(fields()[1].schema(), other.rubrik);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.text)) {
        this.text = data().deepCopy(fields()[2].schema(), other.text);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'annons_id' field.
      * @return The value.
      */
    public java.lang.String getAnnonsId() {
      return annons_id;
    }

    /**
      * Sets the value of the 'annons_id' field.
      * @param value The value of 'annons_id'.
      * @return This builder.
      */
    public se.arbetsformedlingen.kafka.Annons.Builder setAnnonsId(java.lang.String value) {
      validate(fields()[0], value);
      this.annons_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'annons_id' field has been set.
      * @return True if the 'annons_id' field has been set, false otherwise.
      */
    public boolean hasAnnonsId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'annons_id' field.
      * @return This builder.
      */
    public se.arbetsformedlingen.kafka.Annons.Builder clearAnnonsId() {
      annons_id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'rubrik' field.
      * @return The value.
      */
    public java.lang.String getRubrik() {
      return rubrik;
    }

    /**
      * Sets the value of the 'rubrik' field.
      * @param value The value of 'rubrik'.
      * @return This builder.
      */
    public se.arbetsformedlingen.kafka.Annons.Builder setRubrik(java.lang.String value) {
      validate(fields()[1], value);
      this.rubrik = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'rubrik' field has been set.
      * @return True if the 'rubrik' field has been set, false otherwise.
      */
    public boolean hasRubrik() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'rubrik' field.
      * @return This builder.
      */
    public se.arbetsformedlingen.kafka.Annons.Builder clearRubrik() {
      rubrik = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'text' field.
      * @return The value.
      */
    public java.lang.String getText() {
      return text;
    }

    /**
      * Sets the value of the 'text' field.
      * @param value The value of 'text'.
      * @return This builder.
      */
    public se.arbetsformedlingen.kafka.Annons.Builder setText(java.lang.String value) {
      validate(fields()[2], value);
      this.text = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'text' field has been set.
      * @return True if the 'text' field has been set, false otherwise.
      */
    public boolean hasText() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'text' field.
      * @return This builder.
      */
    public se.arbetsformedlingen.kafka.Annons.Builder clearText() {
      text = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Annons build() {
      try {
        Annons record = new Annons();
        record.annons_id = fieldSetFlags()[0] ? this.annons_id : (java.lang.String) defaultValue(fields()[0]);
        record.rubrik = fieldSetFlags()[1] ? this.rubrik : (java.lang.String) defaultValue(fields()[1]);
        record.text = fieldSetFlags()[2] ? this.text : (java.lang.String) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Annons>
    WRITER$ = (org.apache.avro.io.DatumWriter<Annons>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Annons>
    READER$ = (org.apache.avro.io.DatumReader<Annons>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
